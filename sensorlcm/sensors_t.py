"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class sensors_t(object):
    __slots__ = ["id", "orientation", "distance", "ranges"]

    __typenames__ = ["int32_t", "double", "int32_t", "double"]

    __dimensions__ = [None, None, None, [720]]

    def __init__(self):
        self.id = 0
        self.orientation = 0.0
        self.distance = 0
        self.ranges = [ 0.0 for dim0 in range(720) ]

    def encode(self):
        buf = BytesIO()
        buf.write(sensors_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">idi", self.id, self.orientation, self.distance))
        buf.write(struct.pack('>720d', *self.ranges[:720]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != sensors_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return sensors_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = sensors_t()
        self.id, self.orientation, self.distance = struct.unpack(">idi", buf.read(16))
        self.ranges = struct.unpack('>720d', buf.read(5760))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if sensors_t in parents: return 0
        tmphash = (0x18ede0064e8a18d9) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if sensors_t._packed_fingerprint is None:
            sensors_t._packed_fingerprint = struct.pack(">Q", sensors_t._get_hash_recursive([]))
        return sensors_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", sensors_t._get_packed_fingerprint())[0]

